import React from 'react'

export default function Methods() {
    return (
        <>
            <h1>Справочник</h1>
            <h3>Распространённые методы жизненного цикла</h3>
            <hr />
            <h5>render()</h5>
            <p>render() — единственный обязательный метод в классовом компоненте.</p>
            <ul>
                <li><strong>Элемент React.</strong> {`Обычно создаётся с помощью JSX. Указывает React, что рендерить: DOM-узел или пользовательский компонент. Например, <div /> или <MyComponent />`}.</li>
                <li><strong>Массивы и фрагменты.</strong> Возвращает несколько элементов из render(). Подробнее про фрагменты.</li>
                <li><strong>Порталы.</strong> Рендерит несколько дочерних элементов в другое поддерево DOM. Подробнее про порталы.</li>
                <li><strong>Строки и числа.</strong> Рендерит текстовые DOM-узлы.</li>
                <li><strong>Booleans или null.</strong> Ничего не рендерит. {`(Обычно необходим для поддержки паттерна return test && <Child />, где test — логическое значение.)`}</li>
            </ul>
            <h4 ><a className="nav-link" href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">Диаграмма</a></h4>
            <hr />
            <h5>constructor()</h5>
            <p><strong>Вы можете не использовать конструктор в React-компоненте, если вы не определяете состояние или не привязываете методы.</strong></p>
            <p>Конструкторы в React обычно используют для двух целей:</p>
            <ul>
                <li>Инициализация внутреннего состояния через присвоение объекта this.state.</li>
                <li>Привязка обработчиков событий к экземпляру.</li>
            </ul>
            <p><b>!!!</b>Конструктор — единственное место, где можно напрямую изменять this.state. В остальных методах необходимо использовать this.setState()</p>
            <p><b>!!!Так же НЕЛЬЗЯ в конструкторе копировать пропс в состояние!!!</b></p>
            <hr />
            <h5>componentDidMount()</h5>
            <p>componentDidMount() вызывается сразу после монтирования (то есть, вставки компонента в DOM).<br /> В этом методе должны происходить действия, которые требуют наличия DOM-узлов.<br /> Это хорошее место для создания сетевых запросов.</p>
            <p>Вы можете сразу вызвать setState() в componentDidMount().<br /> Это вызовет дополнительный рендер перед тем, как браузер обновит экран.<br /> Гарантируется, что пользователь не увидит промежуточное состояние, даже если render() будет вызываться дважды.<br /> <strong>Используйте этот подход с осторожностью, он может вызвать проблемы с производительностью.</strong></p>
            <hr />
            <h5>{`componentDidUpdate(prevProps, prevState, snapshot)`}</h5>
            <p>componentDidUpdate() вызывается сразу после обновления. Не вызывается при первом рендере.</p>
            <p>Метод позволяет работать с DOM при обновлении компонента. <br />Также он подходит для выполнения таких сетевых запросов, которые выполняются на основании результата сравнения текущих пропсов с предыдущими.<br /> Если пропсы не изменились, новый запрос может и не требоваться.</p>
            <p>В componentDidUpdate() <strong>можно вызывать setState()</strong>, однако его необходимо <strong>обернуть в условие</strong> , как в примере выше, чтобы не возник бесконечный цикл.<br /> Вызов setState() влечет за собой дополнительный рендер, который незаметен для пользователя, но может повлиять на производительность компонента.<br /> Вместо «отражения» пропсов в состоянии рекомендуется использовать пропсы напрямую.<br /> Подробнее о том, почему копирование пропсов в состояние вызывает баги.</p>
            <hr />
            <h5>{`componentWillUnmount()`}</h5>
            <p>   componentWillUnmount() вызывается непосредственно перед размонтированием и удалением компонента.<br /> В этом методе выполняется необходимый сброс: отмена таймеров, сетевых запросов и подписок, созданных в componentDidMount().<br />

                <strong> Не используйте setState()</strong> в componentWillUnmount(), так как компонент никогда не рендерится повторно.<br /> После того, как экземпляр компонента будет размонтирован, он никогда не будет примонтирован снова.
            </p>

        </>
    )
}
